#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server, {allowRequest: async(req, callback) => { 
  var allow = false; 

  // Only when 'messenger-token' exists in cookie, 
  // and the token decoded with the id matching one of user in our database, we allow the connection to server.
  if (req.headers.cookie) 
  {
    var messengerToken;
    const cookies = req.headers.cookie.split(';');
    const tokenPrefix = 'messenger-token=';
    messengerToken = cookies.find(cookie => cookie.includes(tokenPrefix));

    if (messengerToken) {
      const jwt = require("jsonwebtoken");
      const { User } = require("../db/models");

      messengerToken = messengerToken.replace(tokenPrefix, '');
      await jwt.verify(messengerToken, process.env.SESSION_SECRET, async(err, decoded) => {
        if (!err)
          await User.findOne({
            where: { id: decoded.id },
          }).then((user) => {
            if (user) allow = true;
          });
      });
    }
  } 

  callback(null, allow);
}});

io.on("connection", (socket) => {
  socket.on("go-online", (id) => {
    if (!onlineUsers.includes(id)) {
      onlineUsers.push(id);
    }
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);

    // users with the same id join the same room
    socket.join(`room#${id}`);
  });

  socket.on("new-message", (data) => {
    // broadcast to all clients in the room of recipientId
    socket.broadcast.to(`room#${data.recipient.id}`).emit("new-message", {
      message: data.message,
      sender: data.sender,
    });
    // broadcast to all clients in the room of senderId except the sender 
    // if sender isn't null, addMessageToStore() will create a new convo and set otherUser to sender
    // in this case to make sure the real sender's other devices can display this message, sender should set to recipient
    socket.broadcast.to(`room#${data.message.senderId}`).emit("new-message", {
      message: data.message,
      sender: data.sender ? data.recipient : data.sender,
    });
  });

  socket.on("read", (data) => {
    // Broadcast to the sender whose messages are just read
    socket.broadcast.to(`room#${data.senderId}`).emit("read", {
      conversationId: data.conversationId,
      senderId: data.senderId,
      deCount: false,
    });

    // Broadcast to other logged in devices of the user who clicks the siderBar chat and read messages
    socket.broadcast.to(`room#${data.readerId}`).emit("read", {
      conversationId: data.conversationId,
      senderId: data.senderId,
      deCount: true,
    });
  });

  socket.on("logout", (id) => {
    // set offline status of a user only when all his room is empty
    socket.leave(`room#${id}`);
    const isEmpty = !io.sockets.adapter.rooms.get(`room#${id}`);
    if (onlineUsers.includes(id) && isEmpty) {
      userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      socket.broadcast.emit("remove-offline-user", id);
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
